defmodule Infrastructure.Dispatcher.AutogenerateValuesMiddleware do
  alias Infrastructure.Dispatcher.Pipeline

  def pipe_through(%Pipeline{} = pipeline) do
    key_type = EnumHelpers.key_type(pipeline.input)
    exclude = Map.keys(pipeline.input)
    autogenerated_values = generate_needed_values(pipeline.commands, key_type, exclude)
    populated_input = Map.merge(pipeline.input, autogenerated_values)

    Pipeline.with_input(pipeline, populated_input)
  end

  def handle_response(%Pipeline{} = pipeline), do: pipeline
  def handle_error(%Pipeline{} = pipeline), do: pipeline

  defp generate_needed_values(command, key_type, exclude) do
    command
    |> Enum.flat_map(fn command ->
      command.__schema__(:meta)
      |> Enum.reduce([], fn {field, field_options}, values ->
        case Keyword.get(field_options, :autogenerate, false) && field not in exclude do
          true ->
            field = if key_type === :atom, do: field, else: Atom.to_string(field)
            [{field, apply(field_options[:type], :autogenerate, [])} | values]

          false ->
            values
        end
      end)
    end)
    |> Enum.into(%{})
  end
end
